<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chapter1:Hello，World</title>
    <url>/2021/04/15/Chapter1-Hello-World/</url>
    <content><![CDATA[<p>欢迎，你将要开启一个如何使用 <a href="https://www.python.org/">Python</a> 和 <a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a> 框架创建 web应用程序的学习之旅。在第一章，你将会学习如何去新建一个 Flask项目。在本章结束时，你将会在你的电脑上运行一个简单的 Flask Web应用！</p>
<p><em>本章节的 GitHub链接: <a href="https://github.com/miguelgrinberg/microblog/tree/v0.1">Browse</a>，<a href="https://github.com/miguelgrinberg/microblog/archive/v0.1.zip">Zip</a>，<a href="https://github.com/miguelgrinberg/microblog/compare/v0.0...v0.1">Diff</a>。</em></p>
<span id="more"></span>

<h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>如果你没有在你的电脑上安装 Python ，那么现在就开始安装吧！如果你的操作系统没有提供 Python 包，你可以通过 <a href="https://www.python.org/downloads/">Python 官方网站</a> 来下载进行安装。如果你使用 Microsoft Windows 操作系统与WSL或者 Cygwin，请注意你不应使用 Windows 版本的 Python，而是一个能够支持 Ubuntu(如果你使用的是WSL) 或者 Cygwin 的 Unix 版本。</p>
<p>为了确保你安装的 Python 是可运行的，你可以打开终端窗口并输入 <code>python3</code> ，如果这不起作用的话，就试试 <code>python</code> 。以下就是应该呈现的效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Python解释器现在正等待一个交互式提醒，你可以在这里输入 Python 语句。在接下来的几章，你将会了解到这种交互式提醒是非常有用的。但是现在，你已经通过这个确认了你的系统上安装了 Python。退出这个交互式解释器，你可以输入 <code>exit()</code> 加 Enter 键。在 Linux 和 Mac 系统上你也可以通过 Ctrl-D 快捷键来退出解释器。在 Windows 上，可以使用 Ctrl-Z 加 Enter键来退出。</p>
<h3 id="Installing-Flask"><a href="#Installing-Flask" class="headerlink" title="Installing Flask"></a>Installing Flask</h3><p>接下来的步骤是安装 Flask，但是在此之前我想告诉你关于如何安装 Python 包的最佳实践。</p>
<p>在 Python 中，像 Flask 这样的包是支持公共仓库的，任何人都可以下载并安装它们。官方 Python 包仓库叫做 <a href="https://pypi.org/">PyPI</a> ，表示 Python Package Index 的缩写(有些人也将这个仓库戏称为”cheese shop”)。在 PyPI 上安装第三方包非常简单，因为 Python 专门提供了一个名为 <code>pip</code> 的工具来做这个工作(在 Python 2.7中 <code>pip</code> 没有被集成，需要单独安装)。</p>
<p>在你的电脑上安装第三方包，你可以像下面这样使用 <code>pip</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure>

<p>有趣的是，在大多数情况下安装第三方包的这个方法不会有效。如果你在你电脑上安装的全局的 Python解释器，很可能你的普通账号没有权限去修改它，因此只有一种方法让上面的命令工作就是通过管理员账号运行。但是即使没有这种复杂的情况，也要思考下你用上述方法安装第三方包时会发生什么。<code>pip</code> 工具会从 PyPI 上下载包，然后添加到 Python 的安装中。从这时起，在你系统上的每个 Python 脚本都可以访问这个包。 想象一下这样一个情况当你用当时最新的版本 Flask 0.11版本完成了一个 web 应用，但是现在已经支持 0.12版本了。你现在想用 0.12版本开始做第二个应用，但是替换掉0.11版本会让老的程序无法运行。现在你看到问题了么？现在解决方法是为老的应用安装 0.11版本的 Flask，为新的应用安装0.12版本的Flask。</p>
<p>为了解决</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter1:课前甜点</title>
    <url>/2021/04/16/Chapter1-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Python 是著名的“龟叔” Guido van Rossum 在1989年圣诞节为了打发时间而编写的一个编程语言。</p>
<p>Python 的设计具有很强的可读性，相比其他语言经常食用英文关键字，其他语言的一些标点符号，它具有比其他语言更具特色的语法结构。</p>
<span id="more"></span>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>易于学习：龟叔给 Python 的定位就是“优雅”、“明确”、“简单”，所以Python 程序看上去简单易懂，初学者学习，不但入门快，而且将来深入，也可以编写非常复杂的程序。</li>
<li>免费开源：Python 是 FLOSS(自由/开放源码软件)之一。你可以自动的发布这个软件的拷贝、阅读它的源码、对它做出改动等等。</li>
<li>高级语言：当你在用 Python 语言编写程序的时候，不需要考虑管理内存之类的底层细节。</li>
<li>面向对象：Python 既支持面向过程的编程也支持面向对象的编程。在“面向对象”的语言中，程序是由过程仅仅是可以重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。</li>
<li>可拓展性：如果你需要你的一段关键代码运行的更快或者某些算法不公开，你可以把你的部分程序用 C 或 C++ 编写，然后在 Python 程序中使用它们。</li>
<li>丰富的库：Python 的标准库非常庞大，可以帮助你处理各种工作。包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV  文件、密码系统、GUI（图形用户界面）、Tk 和其他与系统有关的操作。记住，只要安装了 Python，所有这些功能都是可用的。这被称作  Python 的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如 wxPython、Twisted 和 Python 图像库等等。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>运行速度慢:和 C 程序相比非常慢，因为 Python 是解释型语言，你的代码会在执行的时候一行一行地翻译成 CPU 能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以很快。</li>
<li>代码无法加密：如果要发布Python程序，就是发布源码，像C语言，只需要把编译后的机器码发布出去即可。所以编译型的语言不存在这个问题。</li>
</ul>
<h4 id="主要应用领域"><a href="#主要应用领域" class="headerlink" title="主要应用领域"></a>主要应用领域</h4><ul>
<li>云计算：云计算最热的语言，典型的应用 OpenStack</li>
<li>WEB开发：许多优秀的 WEB 框架例如 Django、Flask等。许多网站也是通过 Python 开发的，如 YouTube、DropBox、豆瓣、知乎等</li>
<li>科学计算和人工智能：典型的图书馆 NumPy、SciPy、Matplotlib、Enided图书馆、熊猫</li>
<li>系统操作和维护：操作和维护人员的基本语言</li>
<li>金融：定量交易、金融分析，在金融工程领域，Python 不仅使用最多，而且其重要性逐年增加</li>
<li>图形GUI：PyQT、WXPython、TkInter</li>
</ul>
<h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><p>如果你的电脑本身没有自带 Python 的话，可以通过 <a href="https://www.python.org/downloads/">Python 官方网站</a> 来下载安装，然后根据步骤一步步按章即可。Mac和 Linux 平台的话可以通过访问 <a href="https://www.python.org/downloads/source/">资源 </a>这里来下载适用的安装包，解压后在终端执行 <code>./configure</code> 脚本和 <code>make &amp;&amp; make install</code> 进行编译安装。此时 Python 会安装在 <code>/usr/local/bin</code> 目录中，Python 库会安装在 <code>/usr/local/lib/pythonXX</code>，XX为你使用的 Python 版本号。</p>
<p>此时在终端输入下面命令验证安装是否成功:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Python3 -V</span></span><br><span class="line">Python 3.9.2</span><br></pre></td></tr></table></figure>

<p>这里出现 Python 及版本号意味着安装成功，此时可以通过 Python 开始进行编程操作了。</p>
<h4 id="交互式解释器"><a href="#交互式解释器" class="headerlink" title="交互式解释器"></a>交互式解释器</h4><p>当我们在终端输入<code>Python3</code> 时，此时下面会显示主提示符 <code>&gt;&gt;&gt;</code> ，提示输入下一条指令；当输入连续行时，显示次要提示符 <code>...</code> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; the_world_is_flat = True</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> the_world_is_flat:</span></span><br><span class="line">...     print(&quot;Be careful not to fall off!&quot;)</span><br><span class="line">...</span><br><span class="line">Be careful not to fall off!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意出现次要提示符的时候，需要进行缩进，一般为四个空格或者一个 tab。退出Python的话，可以用<code>exit()</code>函数来退出。</p>
</blockquote>
<p>在这里，我们就可以编写第一个 Python 程序了:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello, world&quot;</span>)</span></span><br><span class="line">Hello, world</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br></pre></td></tr></table></figure>

<p>欢迎来到Python世界～</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter2:基础语法</title>
    <url>/2021/04/16/Chapter2-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Python 是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出来的程序绝不能有歧义，所以任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成 CPU 能执行的机器码，然后执行。Python 也不例外。</p>
<span id="more"></span>

<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>由于计算机是美国人发明的，因此最早只有127个字符被编码到计算机中，包含大小写英文字母、数字和一些符号，这个编码被称为 <em>ASCII</em> 编码。后面中国制定了 <em>GB2312</em> 编码，将中文编了进去。这时可以想像全球有多少种文字，都在指定编码的话，难免会造成冲突，显示乱码，所以 <em>Unicode</em> 字符集应运而生，将所有语言都统一到一套编码里，这样就不会再出现乱码问题了。</p>
<p>现在最常用的是 <em>UCS-16</em> 编码，用两个字节表示一个字符（如果非常偏僻的字符，就需要4个字节）。但现在的问题是如果所写的文本都是英文的话，<em>Unicode</em> 编码要比 <em>ASCII</em> 编码多一倍多存储空间，所以本着节约的精神，又出现了把 <em>Unicode</em> 编码转化成“可变长编码”的<em>UTF-8</em> 编码。<em>UTF-8</em> 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会编译成4-6个字节。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">ASCII</th>
<th align="center">Unicode</th>
<th align="center">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">01000001</td>
<td align="center">00000000 01000001</td>
<td align="center">01000001</td>
</tr>
<tr>
<td align="center">中</td>
<td align="center">x</td>
<td align="center">01001110 00101101</td>
<td align="center">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>默认情况下，Python3 的源码文件以 <em>UTF-8</em> 编码的，所有字符串都是 unicode 字符串。当然你也可以为源码文件指定不同的编码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-  </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里使用了 <em>Windows-1252</em> 字符集中的字符编码，对应适应语言是保加利亚语、白俄罗斯语、马其顿语、俄语及埃塞维亚语。</p>
</blockquote>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul>
<li>第一个字符必须是字母或下划线。</li>
<li>标识符的其他部分由字母、数字和下划线组成</li>
<li>标识符区分大小写</li>
</ul>
<p>在 Python 3中，可以用中文作为变量名，非 <em>ASCII</em> 标识符是允许的了。</p>
<h4 id="Python-保留字"><a href="#Python-保留字" class="headerlink" title="Python 保留字"></a>Python 保留字</h4><p>即关键字，这里我们不能用作任何标识符的名称。可以通过 <code>keyword</code> 模块列出所有关键字。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import keyword</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keyword.kwlist</span></span><br><span class="line">[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;__peg_parser__&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>Python 中单行注释以 <code>#</code> 开头，直到该物理行结束。注释可以在行开头，或空白符之后，但不能在字符串中。注释用于阐明代码，Python 不解释注释。即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 注释</span></span><br></pre></td></tr></table></figure>

<p>多行注释可以用多个 <code>#</code> 号，还有 <code>&#39;&#39;&#39;</code> 和 <code>&quot;&quot;&quot;</code> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三个注释</span></span><br><span class="line"><span class="string">第四个注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五个注释</span></span><br><span class="line"><span class="string">第六个注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>Python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 <code>&#123;&#125;</code>。缩进没有规定是几个空格还是Tab，按照约定俗成的惯例，应该始终坚持使用 <strong>4个空格</strong> 的缩进。因为如果缩进的空格数不一致，会导致运行错误，故同一个代码块的语句必须包含相同的缩进空格数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>Python 通常是一行写完一条语句，但如果语句很长，可以使用反斜杠( \ ) 来实现多行语句，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>

<h4 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h4><p>Python 中数字有四种类型：整型、浮点型、布尔型、复数。</p>
<ul>
<li><strong>int (整数)</strong> 如1，只有一种整数类型 <em>int</em>，表示为长整型，没有 Python2 中的 <em>Long</em>。</li>
<li><strong>bool (布尔值)</strong> 布尔值属于整数的子类型，与布尔代数的表示完全一致，一个布尔值只有 <code>True</code> 和 <code>False</code> 两种值，要么是 <code>True</code>，要么是 <code>False</code> .(<strong>请注意大小写</strong>) 布尔值可以用 <code>and</code> 、<code>or</code> 和 <code>not</code> 运算。<ul>
<li><code>and</code> 运算是与运算，只有所有都为 <code>True</code>，<code>and</code> 运算结果才是 <code>True</code> 。</li>
<li><code>or</code> 运算是或运算，只要其中有一个为 <code>True</code>，<code>or</code> 运算结果就是 <code>True</code>。</li>
<li><code>not</code> 运算是非运算，它是一个单目运算符，把 <code>True</code> 变成 <code>False</code>，<code>False</code> 变成<code>True</code>。</li>
</ul>
</li>
<li><strong>float (浮点数)</strong> 即小数。如1.23、2e-2(科学计数法，把10用e代替) 整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。</li>
<li><strong>complex (复数)</strong> 复数包含实部和虚部，分别以一个浮点数表示，后缀 <code>j</code> 或 <code>J</code> 用于表示虚数。如 1 + 2j、1.1 +2.2j</li>
</ul>
<h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
