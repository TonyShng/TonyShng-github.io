<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Python】Chapter1:课前甜点</title>
    <url>/2021/04/16/%E3%80%90Python%E3%80%91Chapter1-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Python 是著名的“龟叔” Guido van Rossum 在1989年圣诞节为了打发时间而编写的一个编程语言。</p>
<p>Python 的设计具有很强的可读性，相比其他语言经常食用英文关键字，其他语言的一些标点符号，它具有比其他语言更具特色的语法结构。</p>
<span id="more"></span>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>易于学习：龟叔给 Python 的定位就是“优雅”、“明确”、“简单”，所以Python 程序看上去简单易懂，初学者学习，不但入门快，而且将来深入，也可以编写非常复杂的程序。</li>
<li>免费开源：Python 是 FLOSS(自由/开放源码软件)之一。你可以自动的发布这个软件的拷贝、阅读它的源码、对它做出改动等等。</li>
<li>高级语言：当你在用 Python 语言编写程序的时候，不需要考虑管理内存之类的底层细节。</li>
<li>面向对象：Python 既支持面向过程的编程也支持面向对象的编程。在“面向对象”的语言中，程序是由过程仅仅是可以重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。</li>
<li>可拓展性：如果你需要你的一段关键代码运行的更快或者某些算法不公开，你可以把你的部分程序用 C 或 C++ 编写，然后在 Python 程序中使用它们。</li>
<li>丰富的库：Python 的标准库非常庞大，可以帮助你处理各种工作。包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV  文件、密码系统、GUI（图形用户界面）、Tk 和其他与系统有关的操作。记住，只要安装了 Python，所有这些功能都是可用的。这被称作  Python 的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如 wxPython、Twisted 和 Python 图像库等等。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>运行速度慢:和 C 程序相比非常慢，因为 Python 是解释型语言，你的代码会在执行的时候一行一行地翻译成 CPU 能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以很快。</li>
<li>代码无法加密：如果要发布Python程序，就是发布源码，像C语言，只需要把编译后的机器码发布出去即可。所以编译型的语言不存在这个问题。</li>
</ul>
<h4 id="主要应用领域"><a href="#主要应用领域" class="headerlink" title="主要应用领域"></a>主要应用领域</h4><ul>
<li>云计算：云计算最热的语言，典型的应用 OpenStack</li>
<li>WEB开发：许多优秀的 WEB 框架例如 Django、Flask等。许多网站也是通过 Python 开发的，如 YouTube、DropBox、豆瓣、知乎等</li>
<li>科学计算和人工智能：典型的图书馆 NumPy、SciPy、Matplotlib、Enided图书馆、熊猫</li>
<li>系统操作和维护：操作和维护人员的基本语言</li>
<li>金融：定量交易、金融分析，在金融工程领域，Python 不仅使用最多，而且其重要性逐年增加</li>
<li>图形GUI：PyQT、WXPython、TkInter</li>
</ul>
<h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><p>如果你的电脑本身没有自带 Python 的话，可以通过 <a href="https://www.python.org/downloads/">Python 官方网站</a> 来下载安装，然后根据步骤一步步按章即可。Mac和 Linux 平台的话可以通过访问 <a href="https://www.python.org/downloads/source/">资源 </a>这里来下载适用的安装包，解压后在终端执行 <code>./configure</code> 脚本和 <code>make &amp;&amp; make install</code> 进行编译安装。此时 Python 会安装在 <code>/usr/local/bin</code> 目录中，Python 库会安装在 <code>/usr/local/lib/pythonXX</code>，XX为你使用的 Python 版本号。</p>
<p>此时在终端输入下面命令验证安装是否成功:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Python3 -V</span></span><br><span class="line">Python 3.9.2</span><br></pre></td></tr></table></figure>

<p>这里出现 Python 及版本号意味着安装成功，此时可以通过 Python 开始进行编程操作了。</p>
<h4 id="交互式解释器"><a href="#交互式解释器" class="headerlink" title="交互式解释器"></a>交互式解释器</h4><p>当我们在终端输入<code>Python3</code> 时，此时下面会显示主提示符 <code>&gt;&gt;&gt;</code> ，提示输入下一条指令；当输入连续行时，显示次要提示符 <code>...</code> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; the_world_is_flat = True</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> the_world_is_flat:</span></span><br><span class="line">...     print(&quot;Be careful not to fall off!&quot;)</span><br><span class="line">...</span><br><span class="line">Be careful not to fall off!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意出现次要提示符的时候，需要进行缩进，一般为四个空格或者一个 tab。退出Python的话，可以用<code>exit()</code>函数来退出。</p>
</blockquote>
<p>在这里，我们就可以编写第一个 Python 程序了:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello, world&quot;</span>)</span></span><br><span class="line">Hello, world</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br></pre></td></tr></table></figure>

<p>欢迎来到Python世界～</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Flask】Chapter1:Hello，World</title>
    <url>/2021/04/15/%E3%80%90Flask%E3%80%91Chapter1-Hello-World/</url>
    <content><![CDATA[<p>欢迎，你将要开启一个如何使用 <a href="https://www.python.org/">Python</a> 和 <a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a> 框架创建 web应用程序的学习之旅。在第一章，你将会学习如何去新建一个 Flask项目。在本章结束时，你将会在你的电脑上运行一个简单的 Flask Web应用！</p>
<p><em>本章节的 GitHub链接: <a href="https://github.com/miguelgrinberg/microblog/tree/v0.1">Browse</a>，<a href="https://github.com/miguelgrinberg/microblog/archive/v0.1.zip">Zip</a>，<a href="https://github.com/miguelgrinberg/microblog/compare/v0.0...v0.1">Diff</a>。</em></p>
<span id="more"></span>

<h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>如果你没有在你的电脑上安装 Python ，那么现在就开始安装吧！如果你的操作系统没有提供 Python 包，你可以通过 <a href="https://www.python.org/downloads/">Python 官方网站</a> 来下载进行安装。如果你使用 Microsoft Windows 操作系统与WSL或者 Cygwin，请注意你不应使用 Windows 版本的 Python，而是一个能够支持 Ubuntu(如果你使用的是WSL) 或者 Cygwin 的 Unix 版本。</p>
<p>为了确保你安装的 Python 是可运行的，你可以打开终端窗口并输入 <code>python3</code> ，如果这不起作用的话，就试试 <code>python</code> 。以下就是应该呈现的效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.9.2 (default, Mar 15 2021, 17:37:51)</span><br><span class="line">[Clang 12.0.0 (clang-1200.0.32.29)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Python解释器现在正等待一个交互式提醒，你可以在这里输入 Python 语句。在接下来的几章，你将会了解到这种交互式提醒是非常有用的。但是现在，你已经通过这个确认了你的系统上安装了 Python。退出这个交互式解释器，你可以输入 <code>exit()</code> 加 Enter 键。在 Linux 和 Mac 系统上你也可以通过 Ctrl-D 快捷键来退出解释器。在 Windows 上，可以使用 Ctrl-Z 加 Enter键来退出。</p>
<h3 id="Installing-Flask"><a href="#Installing-Flask" class="headerlink" title="Installing Flask"></a>Installing Flask</h3><p>接下来的步骤是安装 Flask，但是在此之前我想告诉你关于如何安装 Python 包的最佳实践。</p>
<p>在 Python 中，像 Flask 这样的包是支持公共仓库的，任何人都可以下载并安装它们。官方 Python 包仓库叫做 <a href="https://pypi.org/">PyPI</a> ，表示 Python Package Index 的缩写(有些人也将这个仓库戏称为”cheese shop”)。在 PyPI 上安装第三方包非常简单，因为 Python 专门提供了一个名为 <code>pip</code> 的工具来做这个工作(在 Python 2.7中 <code>pip</code> 没有被集成，需要单独安装)。</p>
<p>在你的电脑上安装第三方包，你可以像下面这样使用 <code>pip</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure>

<p>有趣的是，在大多数情况下安装第三方包的这个方法不会有效。如果你在你电脑上安装的全局的 Python解释器，很可能你的普通账号没有权限去修改它，因此只有一种方法让上面的命令工作就是通过管理员账号运行。但是即使没有这种复杂的情况，也要思考下你用上述方法安装第三方包时会发生什么。<code>pip</code> 工具会从 PyPI 上下载包，然后添加到 Python 的安装中。从这时起，在你系统上的每个 Python 脚本都可以访问这个包。 想象一下这样一个情况当你用当时最新的版本 Flask 0.11版本完成了一个 web 应用，但是现在已经支持 0.12版本了。你现在想用 0.12版本开始做第二个应用，但是替换掉0.11版本会让老的程序无法运行。现在你看到问题了么？现在解决方法是为老的应用安装 0.11版本的 Flask，为新的应用安装0.12版本的Flask。</p>
<p>为了处理不同应用维护不同版本的第三方包的问题，Python 使用虚拟环境的概念。虚拟环境是 Python 解释器的完整副本。当你在虚拟环境中安装第三方包时，系统范围的Python解释器不受影响，只有副本受影响。因此要完全自由地为每个应用安装任何版本的三方包，解决方案就是为每个应用使用不同的虚拟环境。虚拟环境还有一个好处就是它们归创建者所拥有，因此不需要管理员账号。</p>
<p>让我们开始创建一个项目所在的目录。我先把这个目录命名为 <em>microblog</em>, 这便是这个程序的名称：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir microblog</span><br><span class="line">$ <span class="built_in">cd</span> microblog</span><br></pre></td></tr></table></figure>

<p>如果你正在使用 Python 3 版本，虚拟环境已经成为内置模块，你可以用下面的命令去创建它:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m venv venv</span></span><br></pre></td></tr></table></figure>

<p>通过这个命令，我用 Python 通过运行 <code>venv</code> 这个包创建一个名为 <code>venv</code> 的虚拟环境。命令中的第一个 <code>venv</code> 是 Python 虚拟环境包的名称，第二个 <code>venv</code> 是我要用来表示这个特定的虚拟环境的名称。如果你觉得很困惑，你可以用其他你想给虚拟环境命名的名字去替换第二个 venv 。通常我在项目中都用 venv 这个名字给创建的虚拟环境命名，所以无论何时我 cd 到一个项目中都能找到相应的虚拟环境。</p>
<p>命令执行完，在你的目录下将会有一个名为 venv 的目录用来存储虚拟环境相关文件。</p>
<p>不管用什么方式创建了虚拟环境，你应该已经创建了虚拟环境。现在你需要告诉系统你想使用用虚拟环境，然后激活它。要激活全新的虚拟环境你需要使用下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> venv/bin/activate</span></span><br><span class="line">(venv) $_</span><br></pre></td></tr></table></figure>

<p>如果你使用的是Windows的命令提示符窗口，激活命令略有不同：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> venv\Script\activate</span></span><br><span class="line">(venv) $_</span><br></pre></td></tr></table></figure>

<p>当你激活虚拟环境，终端会话的配置环境会被修改，之后你键入 <code>Python</code> 的时候，实际上是调用的虚拟环境中的 Python 解释器。此外，终端提示符也被修改成包含被激活的虚拟环境的名称的格式。这种对终端对话框的改变是临时的私有的，因此当你关闭终端窗口它们不会保留。如果你同时打开多个终端窗口，在每个窗口激活不同的虚拟环境是非常合适的。</p>
<p>现在你已经创建并激活虚拟环境，你可以通过这个来安装 Flask:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> pip install flask</span></span><br></pre></td></tr></table></figure>

<p>如果你想验证虚拟环境中是否成功安装了 Flask，你可以开启 Python 解释器并导入 Flask:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import flask</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; _</span></span><br></pre></td></tr></table></figure>

<p>如果没有提示任何错误那么恭喜你，Flask 已经被成功安装并准备好被使用了。</p>
<h4 id="A-“Hello-World”-Flask-Application"><a href="#A-“Hello-World”-Flask-Application" class="headerlink" title="A “Hello, World” Flask Application"></a>A “Hello, World” Flask Application</h4><p>如果你去 <a href="https://flask.palletsprojects.com/en/1.1.x/">Flask website</a>, 你会得到一个非常简单的示例程序，仅仅只有五行代码。</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Chapter2:基础语法</title>
    <url>/2021/04/16/%E3%80%90Python%E3%80%91Chapter2-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Python 是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出来的程序绝不能有歧义，所以任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成 CPU 能执行的机器码，然后执行。Python 也不例外。</p>
<span id="more"></span>

<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>由于计算机是美国人发明的，因此最早只有127个字符被编码到计算机中，包含大小写英文字母、数字和一些符号，这个编码被称为 <em>ASCII</em> 编码。后面中国制定了 <em>GB2312</em> 编码，将中文编了进去。这时可以想像全球有多少种文字，都在指定编码的话，难免会造成冲突，显示乱码，所以 <em>Unicode</em> 字符集应运而生，将所有语言都统一到一套编码里，这样就不会再出现乱码问题了。</p>
<p>现在最常用的是 <em>UCS-16</em> 编码，用两个字节表示一个字符（如果非常偏僻的字符，就需要4个字节）。但现在的问题是如果所写的文本都是英文的话，<em>Unicode</em> 编码要比 <em>ASCII</em> 编码多一倍多存储空间，所以本着节约的精神，又出现了把 <em>Unicode</em> 编码转化成“可变长编码”的<em>UTF-8</em> 编码。<em>UTF-8</em> 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会编译成4-6个字节。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">ASCII</th>
<th align="center">Unicode</th>
<th align="center">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">01000001</td>
<td align="center">00000000 01000001</td>
<td align="center">01000001</td>
</tr>
<tr>
<td align="center">中</td>
<td align="center">x</td>
<td align="center">01001110 00101101</td>
<td align="center">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>默认情况下，Python3 的源码文件以 <em>UTF-8</em> 编码的，所有字符串都是 <em>unicode</em> 字符串。当然你也可以为源码文件指定不同的编码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-  </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里使用了 <em>Windows-1252</em> 字符集中的字符编码，对应适应语言是保加利亚语、白俄罗斯语、马其顿语、俄语及埃塞维亚语。</p>
</blockquote>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul>
<li>第一个字符必须是字母或下划线。</li>
<li>标识符的其他部分由字母、数字和下划线组成</li>
<li>标识符区分大小写</li>
</ul>
<p>在 Python 3中，可以用中文作为变量名，非 <em>ASCII</em> 标识符是允许的了。</p>
<h4 id="Python-保留字"><a href="#Python-保留字" class="headerlink" title="Python 保留字"></a>Python 保留字</h4><p>即关键字，这里我们不能用作任何标识符的名称。可以通过 <code>keyword</code> 模块列出所有关键字。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import keyword</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keyword.kwlist</span></span><br><span class="line">[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;__peg_parser__&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>Python 中单行注释以 <code>#</code> 开头，直到该物理行结束。注释可以在行开头，或空白符之后，但不能在字符串中。注释用于阐明代码，Python 不解释注释。即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 注释</span></span><br></pre></td></tr></table></figure>

<p>多行注释可以用多个 <code>#</code> 号，还有 <code>&#39;&#39;&#39;</code> 和 <code>&quot;&quot;&quot;</code> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三个注释</span></span><br><span class="line"><span class="string">第四个注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五个注释</span></span><br><span class="line"><span class="string">第六个注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>Python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 <code>&#123;&#125;</code>。缩进没有规定是几个空格还是Tab，按照约定俗成的惯例，应该始终坚持使用 <strong>4个空格</strong> 的缩进。因为如果缩进的空格数不一致，会导致运行错误，故同一个代码块的语句必须包含相同的缩进空格数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>Python 通常是一行写完一条语句，但如果语句很长，可以使用反斜杠( \ ) 来实现多行语句，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>

<h4 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h4><p>Python 中数字有四种类型：整型、浮点型、布尔型、复数。</p>
<ul>
<li><strong>int (整数)</strong> 如1，只有一种整数类型 <em>int</em>，表示为长整型，没有 Python2 中的 <em>Long</em>。</li>
<li><strong>bool (布尔值)</strong> 布尔值属于整数的子类型，与布尔代数的表示完全一致，一个布尔值只有 <code>True</code> 和 <code>False</code> 两种值，要么是 <code>True</code>，要么是 <code>False</code> .(<strong>请注意大小写</strong>) 布尔值可以用 <code>and</code> 、<code>or</code> 和 <code>not</code> 运算。<ul>
<li><code>and</code> 运算是与运算，只有所有都为 <code>True</code>，<code>and</code> 运算结果才是 <code>True</code> 。</li>
<li><code>or</code> 运算是或运算，只要其中有一个为 <code>True</code>，<code>or</code> 运算结果就是 <code>True</code>。</li>
<li><code>not</code> 运算是非运算，它是一个单目运算符，把 <code>True</code> 变成 <code>False</code>，<code>False</code> 变成<code>True</code>。</li>
</ul>
</li>
<li><strong>float (浮点数)</strong> 即小数。如1.23、2e-2(科学计数法，把10用e代替) 整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。</li>
<li><strong>complex (复数)</strong> 复数包含实部和虚部，分别以一个浮点数表示，后缀 <code>j</code> 或 <code>J</code> 用于表示虚数。如 1 + 2j、1.1 +2.2j</li>
</ul>
<h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><p>除了数字，Python 还可以操作字符串。字符串有多种表现形式，用单引号(‘……’)或双引号(“……”) 标注的结果相同。反斜杠 <code>\</code> 用于转义。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;spam eggs&#x27;</span></span></span><br><span class="line">&#x27;spam eggs&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;doesn\&#x27;</span>t<span class="string">&#x27;</span></span></span><br><span class="line">&quot;doesn&#x27;t&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&quot;doesn&#x27;t&quot;</span></span></span><br><span class="line">&quot;doesn&#x27;t&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;&quot;Yes,&quot; they said.&#x27;</span></span></span><br><span class="line">&#x27;&quot;Yes,&quot; they said.&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&quot;\&quot;Yes,\&quot; they said.&quot;</span></span></span><br><span class="line">&#x27;&quot;Yes,&quot; they said.&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;&quot;Isn\&#x27;</span>t,<span class="string">&quot; they said.&#x27;</span></span></span><br><span class="line">&#x27;&quot;Isn\&#x27;t,&quot; they said.&#x27;</span><br></pre></td></tr></table></figure>

<p>在交互式解释器会为输出的字符串加注引号，特殊字符使用反斜杠转义。虽然，有时输出的字符串看起来与输入的字符串不一样(外加的引号可能会改变)，但两个字符串是相同的。如果字符串中有单引号而没有双引号，该字符串外将加注双引号，反之，则加注单引号。 <code>print()</code> 函数输出的内容更加简洁易读，它会省略两边的引号，并输出转义后的特殊字符：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&quot;\&quot;Yes,\&quot; they said.&quot;</span></span></span><br><span class="line">&#x27;&quot;Yes,&quot; they said.&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;&quot;Isn\&#x27;</span>t,<span class="string">&quot; they said.&#x27;</span></span></span><br><span class="line">&#x27;&quot;Isn\&#x27;t,&quot; they said.&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&#x27;&quot;Isn\&#x27;</span>t,<span class="string">&quot;, they said.&#x27;)</span></span></span><br><span class="line">&quot;Isn&#x27;t,&quot;, they said.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; s = <span class="string">&#x27;First line.\nSecond line.&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; s</span></span><br><span class="line">&#x27;First line.\nSecond line.&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(s)</span></span><br><span class="line">First line.</span><br><span class="line">Second line.</span><br></pre></td></tr></table></figure>

<p>如果不希望前置 <code>\</code> 的字符转义成特殊字符，可以使用原始字符串，在引号前添加 <code>r</code> 即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&#x27;C:\some\name&#x27;</span>)</span></span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(r<span class="string">&#x27;C:\some\name&#x27;</span>)</span></span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure>

<p>字符串字面值可以实现跨行连续输入。实现方式是用三引号：<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>  或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code> ，字符串行尾会自动加上回车换行，如果不需要回车换行，在行尾添加 <code>\</code> 即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;\</span></span></span><br><span class="line"><span class="bash">... Usage: thingy [OPTIONS]</span></span><br><span class="line">...        -h                        Display this usage message</span><br><span class="line">...        -H hostname               Hostname to connect to</span><br><span class="line">... &quot;&quot;&quot;)</span><br><span class="line">Usage: thingy [OPTIONS]</span><br><span class="line">       -h                        Display this usage message</span><br><span class="line">       -H hostname               Hostname to connect to</span><br></pre></td></tr></table></figure>

<p>字符串可以用 <code>+</code> 合并(粘到一起)，也可以用 <code>*</code> 重复:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 3 * <span class="string">&#x27;un&#x27;</span> + <span class="string">&#x27;ium&#x27;</span></span></span><br><span class="line">&#x27;unununium&#x27;</span><br></pre></td></tr></table></figure>

<p>相邻的两个或多个<em>字符串字面值</em> (引号标注的字符)会自动合并：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;Py&#x27;</span> <span class="string">&#x27;thon&#x27;</span></span></span><br><span class="line">&#x27;Python&#x27;</span><br></pre></td></tr></table></figure>

<p>拆分长字符串时，这个功能特别实用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; text = (<span class="string">&#x27;Put serveral strings within parentheses &#x27;</span></span></span><br><span class="line">...         &#x27;to have them joined together.&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; text</span></span><br><span class="line">&#x27;Put serveral strings within parentheses to have them joined together.&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这项功能只能用于两个字面值，不能用于变量或表达式。</p>
</blockquote>
<p>合并多个变量，或合并变量与字面值，要用 <code>+</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; prefix = <span class="string">&#x27;Py&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; prefix + <span class="string">&#x27;thon&#x27;</span></span></span><br><span class="line">&#x27;Python&#x27;</span><br></pre></td></tr></table></figure>

<p>字符串支持 <em>索引</em> (下标访问)，第一个字符的索引是0。单字符没有专用的类型，就是长度为一的字符串：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word = <span class="string">&#x27;Python&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[0]</span></span><br><span class="line">&#x27;P&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[5]</span></span><br><span class="line">&#x27;n&#x27;</span><br></pre></td></tr></table></figure>

<p>索引还支持负数，用负数索引时，从右边开始计数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[-1]</span></span><br><span class="line">&#x27;n&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[-2]</span></span><br><span class="line">&#x27;o&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[-6]</span></span><br><span class="line">&#x27;P&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，-0 和 0 一样，因此，负数索引从 -1开始。</p>
</blockquote>
<p>除了索引，字符串还支持 <em>切片</em>。索引可以提取单个字符，<em>切片</em> 则提取子字符串：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[0:2]</span></span><br><span class="line">&#x27;Py&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[2:5]</span></span><br><span class="line">&#x27;tho&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，输出结果包含切片开始，但不包含切片结束。因此，<code>s[:i] + s[i:]</code> 总是等于 <code>s</code>：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[:2] + word[2:]</span></span><br><span class="line">&#x27;Python&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[:4] + word[4:]</span></span><br><span class="line">&#x27;Python&#x27;</span><br></pre></td></tr></table></figure>

<p>切片索引的默认值很有用；省略开始索引时，默认值为0，省略结束索引时，默认为到字符串的结尾：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[:2]</span></span><br><span class="line">&#x27;Py&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[4:]</span></span><br><span class="line">&#x27;on&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[-2:]</span></span><br><span class="line">&#x27;on&#x27;</span><br></pre></td></tr></table></figure>

<p>还可以这样理解切片，索引指向的是字符之间，第一个字符的左侧标为0，最后一个字符的右侧标为 n, n 是字符串长度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> | P | y | t | h | o | n |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> 0   1   2   3   4   5   6</span><br><span class="line">-6  -5  -4  -3  -2  -1</span><br></pre></td></tr></table></figure>

<p>第一行数字是字符串中索引 0…6 的位置，第二行数字是对应的负数索引位置。i 到 j 的切片由 i 和 j 之间所有对应的字符组成。</p>
<p>对于使用非负索引的切片，如果两个索引都不越界，切片长度就是起止索引之差。例如，<code>word[1:3]</code> 的长度是2。</p>
<p>索引越界会报错，但是切片会自动处理越界索引：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[42]</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: string index out of range</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[4:42]</span></span><br><span class="line">&#x27;on&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[42:]</span></span><br><span class="line">&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>Python 字符串不能修改，是 <em>immutable</em>(不可变) 的。因此，为字符串中某个索引位置赋值会报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; word[0] = <span class="string">&#x27;J&#x27;</span></span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;str&#x27; object does not support item assignment</span><br></pre></td></tr></table></figure>

<p>要生成不同的字符串，应新建一个字符串：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;J&#x27;</span> + word[1:]</span></span><br><span class="line">&#x27;Jython&#x27;</span><br></pre></td></tr></table></figure>

<p>内置函数 <code>len()</code> 返回字符串的长度：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; s = <span class="string">&#x27;laaaaalalallalalalalalallalala&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; len(s)</span></span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<blockquote>
<p>空行也是程序代码的一部分。</p>
</blockquote>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>Python提供了 <code>input()</code> 函数进行输入，并将之存放到一个变量里：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; name = input()</span></span><br><span class="line">RainTwo</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; name</span></span><br><span class="line">&#x27;RainTwo&#x27;</span><br></pre></td></tr></table></figure>

<p>可以在 <code>input()</code> 中添加字符串来进行提示:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; name = input(<span class="string">&#x27;请输入名字:&#x27;</span>)</span></span><br><span class="line">请输入名字:RainTwo</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; name</span></span><br><span class="line">&#x27;RainTwo&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h4><p>缩进相同的一组语句构成一个代码块，我们称之为代码组。</p>
<p>像 <code>if</code>、<code>while</code>、<code>def</code> 和 <code>class</code>这样的复合语句，首行以关键字开始，以冒号(:)结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句(<em>clause</em>)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">do</span> = True</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> <span class="keyword">do</span> :</span></span><br><span class="line">...     print(&quot;做了&quot;)</span><br><span class="line">... else:</span><br><span class="line">...     print(&quot;没做&quot;)</span><br><span class="line">...</span><br><span class="line">做了</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意要缩进。</p>
</blockquote>
<h4 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h4><p>在 Python 中用 <code>import</code> 或者 <code>from...import</code> 来到如相应的模块。</p>
<p>将整个模块(<em>somemodule</em>)导入，格式为：<code>import somemodule</code> </p>
<p>从某个模块中导入某个函数，格式为：<code>from somemodule import somefunction</code></p>
<p>从某个模块中导入多个函数，格式为：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p>
<p>将某个模块中的函数全部导入，格式为：<code>from somemodule import *</code></p>
<p>将某个模块换个别名，格式为：<code>import flask as fl</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv, path</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Chapter5:Number</title>
    <url>/2021/04/21/%E3%80%90Python%E3%80%91Chapter5-Number/</url>
    <content><![CDATA[<p>Python 数字数据类型用于存储数值，数据类型是不允许改变的，这就意味着如果改变数字数据类型的值，将会重新分配内存空间。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Chapter4:运算符</title>
    <url>/2021/04/20/%E3%80%90Python%E3%80%91Chapter4-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>运算符用于执行程序代码运算，会针对一个以上操作数项目来进行运算。例如 <code>4 + 5 = 9</code> 中 4 和 5 被称为<strong>操作数</strong> ， <code>+</code> 被称为<strong>运算符</strong>。</p>
<p>Python主要有以下类型的运算符： 算数运算符、比较(关系)运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符等。</p>
<span id="more"></span>

<h4 id="算符运算符"><a href="#算符运算符" class="headerlink" title="算符运算符"></a>算符运算符</h4><p>以下假设变量 a 为 10, 变量 b 为 21:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加 两个对象相加</td>
<td>a + b 结果输出 31</td>
</tr>
<tr>
<td>-</td>
<td>减 得到负数或是一个数减去另一个数</td>
<td>a - b 结果输出 -11</td>
</tr>
<tr>
<td>*</td>
<td>乘 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 结果输出 210</td>
</tr>
<tr>
<td>/</td>
<td>除 x 除以 y</td>
<td>b / a 结果输出 2.1</td>
</tr>
<tr>
<td>%</td>
<td>取模 返回除法的余数</td>
<td>b % a 结果输出 1</td>
</tr>
<tr>
<td>**</td>
<td>幂 返回 x 的 y 次幂</td>
<td>a**b 为10的21次方</td>
</tr>
<tr>
<td>//</td>
<td>取整除 向下取接近商的整数</td>
<td>9//2 = 4    -9//2 = -5</td>
</tr>
</tbody></table>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>同样假设变量 a 为 10, 变量 b 为 20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于  比较对象是否相等</td>
<td>(a == b)  返回 False</td>
</tr>
<tr>
<td>!=</td>
<td>不等于  比较两个对象是否不相等</td>
<td>(a != b)  返回 True</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于  返回 x 是否大于 y</td>
<td>(a &gt; b) 返回 False</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于  返回 x 是否小于 y</td>
<td>(a &lt; b) 返回 True</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 返回 x 是否大于等于 y</td>
<td>(a &gt;= b) 返回 False</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 返回 x 是否小于等于 y</td>
<td>(a &lt;= b) 返回 True</td>
</tr>
</tbody></table>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td><code>c = a + b</code> 将 a + b 的运算结果赋值给 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td><code>c += a</code> 等效于 <code>c = c + a</code></td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td><code>c -= a</code> 等效于 <code>c = c - a</code></td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td><code>c *= a</code> 等效于 <code>c = c * a</code></td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td><code>c /= a</code> 等效于 <code>c = c / a</code></td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td><code>c %= a</code> 等效于 <code>c = c % a</code></td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td><code>c **= a</code> 等效于 <code>c = c ** a</code></td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td><code>c //= a</code> 等效于 <code>c = c //a</code></td>
</tr>
<tr>
<td>:=</td>
<td>海象运算符，可在表达式内部为变量赋值</td>
<td>if (n := len(a)) &gt; 10:<br />       print(f”List is too long ({n} elements, expected &lt;= 10)”)</td>
</tr>
</tbody></table>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>按位运算符是把数字看作二进制来进行计算的。下列变量 a 为60 二进制为 0011 1100，b 为13 二进制为 0000 1101</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0</td>
<td>(a &amp; b) 输出结果为12，二进制解释：0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或运算符：只要对应的两个二进位有一个为1时，结果位为1。</td>
<td>(a | b) 输出结果为61，二进制解释： 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td>(a ^ b) 输出结果 49，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符：对数据的每个二进制位取反，即把1变为0，把0变为1。 ~x 类似于 -x-1</td>
<td>(~a) 输出结果 -61，二进制解释：1100 0011，在一个有符号二进制数的补码形式</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定易懂的位数，高位丢弃，低位补0</td>
<td>a &lt;&lt; 2，输出结果 240，二进制解释：1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>
<td>a &gt;&gt; a 输出结果为15，二进制解释：0000 1111</td>
</tr>
</tbody></table>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>Python语言支持逻辑运算符，假设变量 a 为 10, 变量 b 为 20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与” 从左到右计算表达式，若所有值均为真，则返回最后一个值，若存在假，返回第一个假值 (数字0为假，其他皆为真；字符”” 为假，其他皆为真)</td>
<td>(a and b) 返回 20.</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或” 从左到右计算，返回第一个为真多值</td>
<td>(a or b) 返回 10</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非” 如果 x 为 True, 返回 False。如果 x 为 False，它返回 True</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody></table>
<h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>如果在指定的序列中找到值返回 True，否则返回 False</td>
<td>x 在 y 序列中，如果 x 在 y 序列中返回 True</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False</td>
<td>x 不在 y 序列中，如果 x 不在 y 序列中返回 True</td>
</tr>
</tbody></table>
<h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p>身份运算符用于比较两个对象的存储单元。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>is</td>
<td>is 是判断两个标识符是不是引用自一个对象</td>
<td><code>x is y</code>,类似<code>id(x) == id(y)</code>，如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td>is not</td>
<td>is not 是判断两个标识符是不是引用自不同对象</td>
<td><code>x is not y</code>,类似 <code>id(a) != id(b)</code>。如果引用的不是同一个对象则返回结果 True,否则返回 False.</td>
</tr>
</tbody></table>
<blockquote>
<p>注：<code>id()</code> 函数用于获取对象内存地址。</p>
</blockquote>
<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数(最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转，一元加号和减号(最后两个的方法为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，求余数和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^  |</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>==  !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>=  %=  /=  //=  -=  +=  *=  **=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is  is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in   not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not and or</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Chapter3:基本数据类型</title>
    <url>/2021/04/19/%E3%80%90Python%E3%80%91Chapter3-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。</p>
<span id="more"></span>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>Python 中变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。在Python中，变量就是变量，它没有类型，我们所说的”类型“是变量所指的内存中对象的类型。</p>
<p>这种变量本身类型不固定的语言称之为 <strong>动态语言</strong> ，与之相对的是 <strong>静态语言</strong>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="string">&quot;ABC&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
</blockquote>
<p>等号( <code>=</code> )用来给变量赋值。等号( = )运算符左边是一个变量名，等号( = )运算符右边是存储在变量中的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">counter = <span class="number">100</span> <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span> <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;RainTwo&quot;</span>  <span class="comment"># 字符串</span></span><br></pre></td></tr></table></figure>

<p>在这里Python解释器干了两件事：</p>
<ol>
<li>在内存中创建了一个 <code>RainTwo</code> 的字符串；</li>
<li>在内存中创建了一个名为 <code>name</code> 的变量，并把它指向 <code>RainTwo</code>。</li>
</ol>
<p>也可以把一个变量 <code>a</code> 赋值给另一个变量 <code>b</code> ，这个操作实际上就是把变量 <code>b</code> 指向变量 <code>a</code> 所指向的数据。</p>
<p>Python 允许你同时为多个变量赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;RainTwo&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>所谓常量就是不能变的变量，比如常用的数字常数 π 就是一个常量。在 Python 中，通常用全部大写的变量名表示常量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.141592653</span></span><br></pre></td></tr></table></figure>

<p>但事实上 PI 仍然是一个变量，Python 根本没有任何机制保证 PI 不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量 PI 的值，也没人能拦住你。</p>
<p>最后解释下整数的除法为什么也是精确的。在 Python 中，有两种除法，一种是 <code>/</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 10 / 3</span></span><br><span class="line">3.3333333333333335</span><br></pre></td></tr></table></figure>

<p><code>/</code> 除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 9 / 3</span></span><br><span class="line">3.0</span><br></pre></td></tr></table></figure>

<p>还有一种除法是 <code>//</code> ，称为地板除，两个整数的除法仍然是整数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 10 // 3</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>即整数的地板除 <code>//</code> 永远是整数，即使除不尽。要做精确的除法，使用 <code>/</code> 就可以。</p>
<p>因为 // 除法只取结果的整数部分，所以 Python 还提供一个余数计算，可以得到两个整数相除的余数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 10 % 3</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h4><p>Python3 有六个标准的数据类型：</p>
<ul>
<li>Number  (数字)</li>
<li>String  (字符串)</li>
<li>List (列表)</li>
<li>Tuple (元组)</li>
<li>Set (集合)</li>
<li>Dictionary (字典)</li>
</ul>
<p>分为<strong>不可变数据</strong>: Number、String、Tuple；</p>
<p>和<strong>可变数据</strong>: List、Dictionary、Set。</p>
<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>Python3 支持 <strong>int</strong>、<strong>float</strong>、<strong>bool</strong>、<strong>complex</strong>(复数)</p>
<p>内置的 <code>type()</code> 函数可以用来查询变量所指的对象类型:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span></span><br><span class="line">&lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt; &lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>此外还可以用 <code>isinstance</code> 来判断:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = 111</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; isinstance(a, int)</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>isinstance 和 type 的区别在于：</p>
<ul>
<li>type() 不会认为子类是一种父类类型</li>
<li>isinstance() 会认为子类是一种父类类型</li>
</ul>
<h5 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 5 + 4  <span class="comment"># 加法</span></span></span><br><span class="line">9</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 4.3 - 2 <span class="comment"># 减法</span></span></span><br><span class="line">2.3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 3 * 7  <span class="comment"># 乘法</span></span></span><br><span class="line">21</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 2 / 4  <span class="comment"># 除法，得到浮点数</span></span></span><br><span class="line">0.5</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 2 // 4 <span class="comment"># 除法，得到整数</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 17 % 3 <span class="comment"># 取余</span></span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 2 ** 5 <span class="comment"># 乘方</span></span></span><br><span class="line">32</span><br></pre></td></tr></table></figure>

<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>Python 中的字符串用单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来，同时使用反斜杠 <code>\</code> 转义特殊字符。</p>
<p>加号 <code>+</code> 是字符串的连接符，星号 <code>*</code> 表示复制当前字符串，与之结合的数字为复制的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;RainTwo&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)  <span class="comment"># 输出字符串两次，也可以写成 print(2 * str)  RainTwoRainTwo</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>)  <span class="comment"># 连接字符串 输出 RainTwoTEST</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复</li>
<li>Python 中的字符串有两种索引方式，从左往右以0开始，从右往左以 -1 开始。</li>
<li>Python 中的字符串不能改变。</li>
</ol>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>List(列表) 是 Python 中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表(所谓嵌套)。</p>
<p>列表是卸载方括号 <code>[]</code> 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<p>列表截取的语法格式：<code>变量[头下标:尾下标]</code> , 索引值以 <code>0</code> 为开始，<code>-1</code> 为从末尾的开始位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">      <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span></span><br><span class="line">     -<span class="number">5</span>   -<span class="number">4</span>   -<span class="number">3</span>   -<span class="number">2</span>   -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>加号 + 是列表连接运算符，星号 * 是重复操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;abcd&#x27;</span>, <span class="number">789</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span> * <span class="number">2</span>) <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure>

<p>与 Python 的字符串不一样的是，列表中的元素是可以改变的。</p>
<p>注意:</p>
<ol>
<li>List写在方括号之间，元素用逗号隔开。</li>
<li>和字符串一样，List 可以被索引和切片。</li>
<li>List 可以使用 <code>+</code> 操作符进行拼接。</li>
<li>List 中的元素是可以改变的。</li>
</ol>
<p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引1到索引4的位置并设置步长为2(间隔一个位置)来截取字符串:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; letters = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; letters[1:4:2]</span></span><br><span class="line">[&#x27;u&#x27;, &#x27;o&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h4><p>元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <code>()</code> 里，元素之间用逗号隔开。</p>
<p>元组中的元素类型也可以不相同:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span> = (<span class="string">&#x27;abcd&#x27;</span>, <span class="number">789</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">79.2</span>)</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>)             <span class="comment"># 输出元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span>(tinytuple *<span class="number">2</span>)      <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure>

<p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取，可以把字符串看作一种特殊的元组。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(tup[0])</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(tup[1:5])</span></span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; tup[0] = 11</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br></pre></td></tr></table></figure>

<p>虽然 tuple 的元素不可改变，但它可以包含可变的对象，比如 list 列表。</p>
<p>构造包含 0 个或 1个元素的元组比较特殊，所以有一些额外的语法规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = ()     <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)  <span class="comment"># 一个元素，需要在元素后面添加逗号</span></span><br></pre></td></tr></table></figure>

<p>string、list 和 tuple 都属于 sequence(序列)。</p>
<p>注意：</p>
<ol>
<li>与字符串一样，元组的元素不能修改</li>
<li>元组也可以被索引和切片，方法一样</li>
<li>注意构造包含0 或 1 个元素的元组的特殊语法规则</li>
<li>元组也可以使用 <code>+</code> 操作符进行拼接</li>
</ol>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>集合是由一个或数个形态各异的大小整体组成，构成集合的事物或者对象称作元素或是成员。</p>
<p>基本功能是进行成员关系测试和删除重复元素。</p>
<p>可以使用大括号 <code>&#123;&#125;</code> 或者 <code>set()</code> 函数创建集合，注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123;&#125;</code>，因为 <code>&#123;&#125;</code> 是用来创建一个空字典的。</p>
<p>创建格式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parame = &#123;value01, value02, ...&#125;</span><br><span class="line"><span class="built_in">set</span>(value)</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Tencent&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(sites)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># a 和 b 的差集  &#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># a 和 b 的并集  &#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># a 和 b 的交集  &#123;&#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># a 和 b 中不同时存在的元素  &#123;&#x27;z&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h4><p>字典是 Python 中另一个非常有用的内置数据类型。</p>
<p>列表是<strong>有序</strong>的对象集合，字典是<strong>无序</strong>的对象集合。两者之间的区别在于: 字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 <code>&#123;&#125;</code> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
<p>键(key) 必须使用不可变类型。</p>
<p>在同一个字典中，键(key)必须是唯一的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 啦啦啦&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;2 - 啦啦啦&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.raintwo.wang&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span>(tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span>(tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span>(tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>

<p>构造函数 <code>dict()</code> 可以直接从键值对序列中构建字典如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。</p>
<p>注意:</p>
<ol>
<li>字典是一种映射类型，它的元素是键值对。</li>
<li>字典的关键字必须为不可变类型，且不能重复。</li>
<li>创建空字典使用 <code>&#123;&#125;</code></li>
</ol>
<h4 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h4><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int(x, [base])</td>
<td>将 x 转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将 x 转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real, [image])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式，并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个(key, value) 元组序列</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符串</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
